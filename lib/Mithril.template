'use strict'

var m = require('mithril')

var mapper = require('mithril-mapper')
var mapObject = mapper.mapObject.bind( mapper )

var _ = require('isa.js')

var v = require('vindication.js')

var Hammer = require('hammerjs')
delete Hammer.defaults.cssProps.userSelect

function addClass ( el, className ) {
	if (el.classList)
		el.classList.add(className)
	else
		el.className += ' ' + className
	return this
}
function removeClass ( el, className ) {
	if (el.classList)
		el.classList.remove(className)
	else
		el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ')
	return this
}

function capitalizeFirstvarter (string) {
	return string.charAt(0).toUpperCase() + string.slice(1)
}

function valuateEventBinders ( ctrl, viewName, modelName, context, element, model, path, milieu ) {
	var compute = context.stopComputationForEvents || !!milieu['data-compute']
	for ( var key in milieu ) {
		if (key && key.indexOf('data-event-') === 0 ) {
			if ( !element.id ) {
				console.error( 'ID is required for event binding', element )
				throw new Error('ID is required for event binding')
			}
			var eventName = key.substring( 'data-event-'.length )
			var fnName = milieu[ key ] || (eventName + 'On' + element.id)
			var refName = eventName + 'For' + element.id // viewName + (element.id||'') + 'At' + path
			if ( !context[ refName ] ) {
				context[ refName ] = function () {
					// setTimeout( function(){
					if ( compute )
						m.startComputation()
					context.emit( fnName, arguments[0], viewName, modelName, element, ctrl, model, path, milieu )
					if ( compute )
						m.endComputation()
					// }, 0 )
				}
			}
			element.removeEventListener(eventName, context[ refName ])
			element.addEventListener(eventName, context[ refName ])
		}
	}
}
function checkContent ( milieu, key ) {
	return milieu[ key ]
}
function valuateContent ( ctrl, controlOptions, context, element, model, path, milieu, value ) {
	if ( !value ) return null
	var f = new Function( '$ctrl', '$opts', '$context', '$root', '$array', '$item', '$index', 'return ' + value + '' )
	try {
		return {
			value: f( ctrl, controlOptions, context, model, milieu.array, milieu.item || model, milieu.index )
		}
	} catch ( err ) {
		err.message = 'While evaluating: ' + value + ' ' + err.message
		console.error( err )
	}
	return null
}
function valuateValuation ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-valuate'] )
	if ( res ) {
		element.style.value = _.isString( res.value ) ? res.value : JSON.stringify( res.value )
	}
}
function valuateVisibility ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-visible'] )
	if ( res ) {
		element.style.visibility = res.value ? 'visible' : 'hidden'
	}
}
function valuateDisplay ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-display'] )
	if ( res ) {
		element.style.display = res.value ? 'inline' : 'none'
	}
}
function valuateHTML ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-html'] )
	if ( res ) {
		while (element.firstChild)
			element.removeChild( element.firstChild )
		try {
			element.insertAdjacentHTML('afterbegin', res.value)
		} catch ( err ) {
			err.message = 'While parsing html text: ' + res.value + ' ' + err.message
			console.error( err )
		}
	}
}
function valuateStyle ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-style'] )
	if ( res ) {
		var styles = res.value
		for ( var key in styles ) {
			if ( key ) {
				if ( styles[ key ] )
					element.style[ key ] = styles[ key ]
				else
					delete element.style[ key ]
			}
		}
	}
}
function valuateEnable ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-enable'] )
	if ( res ) {
		var enabling = res.value
		if ( enabling ) {
			removeClass( element, 'disabled' )
			addClass( element, 'enabled' )
		}
		else {
			removeClass( element, 'enabled' )
			addClass( element, 'disabled' )
		}
	}
}
function valuateSelect ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-select'] )
	if ( res ) {
		var selection = res.value
		if ( selection )
			addClass( element, 'selected' )
		else
			removeClass( element, 'selected' )
	}
}
function valuateClassEnable ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-class-enable'] )
	if ( res ) {
		var attributes = res.value
		for ( var key in attributes ) {
			if ( key ) {
				if ( attributes[ key ] )
					addClass( element, key )
				else
					removeClass( element, key )
			}
		}
	}
}

function valuateAttributeEnable ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-attr-enable'] )
	if ( res ) {
		var attributes = res.value
		for ( var key in attributes ) {
			if ( key ) {
				if ( attributes[ key ] )
					element.setAttribute(key, attributes[ key ])
				else
					element.removeAttribute(key)
			}
		}
	}
}
function valuateAttribute ( ctrl, controlOptions, context, element, model, path, milieu ) {
	var res = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, milieu['data-attr'] )
	if ( res ) {
		var attributes = res.value
		for ( var key in attributes ) {
			if ( key ) {
				if ( key === 'class' )
					addClass( element, attributes[ key ] )
				else
					element.setAttribute(key, attributes[ key ])
			}
		}
	}
}
function valuateMember ( ctrl, element, milieu ) {
	if ( checkContent( milieu, 'data-member' ) ) {
		var capName = capitalizeFirstvarter( milieu[ 'data-member' ] )
		element.checked = ctrl['hasIn' + capName]( element.value || element.name )
	}
}
function valuateTap ( ctrl, viewName, modelName, controlOptions, context, element, model, path, milieu ) {
	if ( context && checkContent( milieu, 'data-tap' ) ) {
		if ( !milieu[ 'data-tap' ] || (milieu[ 'data-tap' ] === 'false') ) return

		var compute = context.stopComputationForEvents || !!milieu['data-compute']
		new Hammer(element, {}).on('tap', function (ev) {
			var eventName = (milieu[ 'data-tap' ] === 'true') ? ('tapedOn' + viewName) : milieu[ 'data-tap' ]
			if ( eventName.charAt(0) === '$' ) eventName = valuateContent( ctrl, controlOptions, context, element, model, path, milieu, eventName ).value
			if (context.emit) {
				if ( compute )
					m.startComputation()
				context.emit( eventName, ev, viewName, modelName, element, ctrl, model, path, milieu)
				if ( compute )
					m.endComputation()
			}
		} )
	}
}
function readValidationRule ( model, path, V ) {
	var qualifiers = path.split('.')
	var value = model, contraint = V
	for ( var i = 0; i < qualifiers.length && value[ qualifiers[i] ] && contraint[ qualifiers[i] ]; ++i ) {
		value = value[ qualifiers[i] ]
		contraint = contraint[ qualifiers[i] ]
	}
	return {
		value: value,
		contraint: contraint
	}
}
function createConfig ( ctrl, controlOptions, viewName, modelName, appContext, model, path, milieu ) {
	return function (element, isInitialized, context) {
		valuateMember( ctrl, element, milieu )
		valuateValuation( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateVisibility( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateDisplay( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateHTML( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateStyle( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateSelect( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateEnable( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateAttribute( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateClassEnable( ctrl, controlOptions, appContext, element, model, path, milieu )
		valuateAttributeEnable( ctrl, controlOptions, appContext, element, model, path, milieu )
		if ( !isInitialized ) {
			valuateEventBinders( ctrl, viewName, modelName, appContext, element, model, path, milieu )
			valuateTap( ctrl, viewName, modelName, controlOptions, appContext, element, model, path, milieu )
		}
		else if ( milieu.clearElement && milieu.invalidElement && milieu.validElement ) {
			var vRule = readValidationRule( model, path, milieu.V )
			if ( vRule.value && _.isFunction(vRule.value) && vRule.contraint ) {
				var inValid = v.validate( vRule.value(), vRule.contraint, model )
				milieu.clearElement( element )
				if ( inValid )
					milieu.invalidElement( element, inValid )
				else
					milieu.validElement( element )
			}
		}
	}
}

module.exports = {
	mount: function ( model, context, viewName, modelName, element, envOptions, controlOptions ) {
		var Controller = mapObject( modelName, model.validation )
		var firstRun = true

		if ( controlOptions )
			Array.prototype.forEach.call( Object.keys(controlOptions), function (key, i) {
				if ( !Controller[key] )
					Controller[key] = controlOptions[key]
			} )

		var Component = {
			controller: Controller,
			view: $$$$
		}

		if ( context && context.emit )
			context.emit( 'init' + viewName + 'ViewModel', model.dataModel )

		// m.mount( element, { controller: controller, view: Component.view} )
		m.mount( element, m.component(Component, model.dataModel) )
	}
}
